"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.countInstructions = exports.signMessage = exports.fixSignature = exports.trackReceivedTokenAndTx = exports.deployContractFromBytecode = exports.deployContract = exports.timeIncreaseTo = exports.deployAndGetContract = void 0;
const tslib_1 = require("tslib");
require("@nomicfoundation/hardhat-ethers"); // required to populate the HardhatRuntimeEnvironment with ethers
const hardhat_1 = tslib_1.__importStar(require("hardhat"));
const hardhat_network_helpers_1 = require("@nomicfoundation/hardhat-network-helpers");
const prelude_1 = require("./prelude");
async function deployAndGetContract({ contractName, constructorArgs, deployments, deployer, deploymentName = contractName, skipVerify = false, skipIfAlreadyDeployed = true, gasPrice, maxPriorityFeePerGas, maxFeePerGas, log = true, waitConfirmations = prelude_1.constants.DEV_CHAINS.includes(hardhat_1.default.network.name) ? 1 : 6, }) {
    /**
     * Deploys contract and tries to verify it on Etherscan if requested.
     * @remarks
     * If the contract is deployed on a dev chain, verification is skipped.
     * @returns Deployed contract instance
     */
    const { deploy } = deployments;
    const deployOptions = {
        args: constructorArgs,
        from: deployer,
        contract: contractName,
        skipIfAlreadyDeployed,
        gasPrice: gasPrice?.toString(),
        maxPriorityFeePerGas: maxPriorityFeePerGas?.toString(),
        maxFeePerGas: maxFeePerGas?.toString(),
        log,
        waitConfirmations,
    };
    const deployResult = await deploy(deploymentName, deployOptions);
    if (!(skipVerify || prelude_1.constants.DEV_CHAINS.includes(hardhat_1.default.network.name))) {
        await hardhat_1.default.run('verify:verify', {
            address: deployResult.address,
            constructorArguments: constructorArgs,
        });
    }
    else {
        console.log('Skipping verification');
    }
    return await hardhat_1.ethers.getContractAt(contractName, deployResult.address);
}
exports.deployAndGetContract = deployAndGetContract;
async function timeIncreaseTo(seconds) {
    const delay = 1000 - new Date().getMilliseconds();
    await new Promise((resolve) => setTimeout(resolve, delay));
    await hardhat_network_helpers_1.time.increaseTo(seconds);
}
exports.timeIncreaseTo = timeIncreaseTo;
async function deployContract(name, parameters = []) {
    const ContractFactory = await hardhat_1.ethers.getContractFactory(name);
    const instance = await ContractFactory.deploy(...parameters);
    await instance.waitForDeployment();
    return instance;
}
exports.deployContract = deployContract;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function deployContractFromBytecode(abi, bytecode, parameters = [], signer) {
    const ContractFactory = await hardhat_1.ethers.getContractFactory(abi, bytecode, signer);
    const instance = await ContractFactory.deploy(...parameters);
    await instance.waitForDeployment();
    return instance;
}
exports.deployContractFromBytecode = deployContractFromBytecode;
async function trackReceivedTokenAndTx(provider, token, wallet, txPromise, ...args) {
    const tokenAddress = 'address' in token ? token.address : await token.getAddress();
    const isETH = tokenAddress === prelude_1.constants.ZERO_ADDRESS || tokenAddress === prelude_1.constants.EEE_ADDRESS;
    const getBalance = 'balanceOf' in token ? token.balanceOf.bind(token) : provider.getBalance.bind(provider);
    const preBalance = await getBalance(wallet);
    const txResponse = await txPromise(...args);
    const txReceipt = 'wait' in txResponse ? await txResponse.wait() : txResponse[1];
    const txFees = wallet.toLowerCase() === txReceipt.from.toLowerCase() && isETH
        ? txReceipt.gasUsed * txReceipt.gasPrice
        : 0n;
    const postBalance = await getBalance(wallet);
    return [postBalance - preBalance + txFees, 'wait' in txResponse ? txReceipt : txResponse];
}
exports.trackReceivedTokenAndTx = trackReceivedTokenAndTx;
function fixSignature(signature) {
    // in geth its always 27/28, in ganache its 0/1. Change to 27/28 to prevent
    // signature malleability if version is 0/1
    // see https://github.com/ethereum/go-ethereum/blob/v1.8.23/internal/ethapi/api.go#L465
    let v = parseInt(signature.slice(130, 132), 16);
    if (v < 27) {
        v += 27;
    }
    const vHex = v.toString(16);
    return signature.slice(0, 130) + vHex;
}
exports.fixSignature = fixSignature;
async function signMessage(signer, messageHex = '0x') {
    return fixSignature(await signer.signMessage(messageHex));
}
exports.signMessage = signMessage;
async function countInstructions(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
provider, txHash, instructions) {
    const trace = await provider.send('debug_traceTransaction', [txHash]);
    const str = JSON.stringify(trace);
    return instructions.map((instr) => {
        return str.split('"' + instr.toUpperCase() + '"').length - 1;
    });
}
exports.countInstructions = countInstructions;
//# sourceMappingURL=utils.js.map