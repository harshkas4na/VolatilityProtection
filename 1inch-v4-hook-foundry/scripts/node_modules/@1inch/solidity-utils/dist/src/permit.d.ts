import { SignTypedDataVersion } from '@metamask/eth-sig-util';
import { Wallet } from 'ethers';
import '@nomicfoundation/hardhat-ethers';
import { SignerWithAddress } from '@nomicfoundation/hardhat-ethers/signers';
import { DaiLikePermitMock, ERC20Permit } from '../typechain-types';
export declare const TypedDataVersion = SignTypedDataVersion.V4;
export declare const defaultDeadline: bigint;
export declare const defaultDeadlinePermit2: bigint;
export declare const EIP712Domain: {
    name: string;
    type: string;
}[];
export declare const Permit: {
    name: string;
    type: string;
}[];
export declare const DaiLikePermit: {
    name: string;
    type: string;
}[];
export declare function trim0x(bigNumber: bigint | string): string;
export declare function cutSelector(data: string): string;
export declare function domainSeparator(name: string, version: string, chainId: string, verifyingContract: string): string;
export declare function buildData(name: string, version: string, chainId: number, verifyingContract: string, owner: string, spender: string, value: string, nonce: string, deadline?: string): {
    readonly types: {
        readonly Permit: {
            name: string;
            type: string;
        }[];
    };
    readonly domain: {
        readonly name: string;
        readonly version: string;
        readonly chainId: number;
        readonly verifyingContract: string;
    };
    readonly message: {
        readonly owner: string;
        readonly spender: string;
        readonly value: string;
        readonly nonce: string;
        readonly deadline: string;
    };
};
export declare function buildDataLikeDai(name: string, version: string, chainId: number, verifyingContract: string, holder: string, spender: string, nonce: string, allowed: boolean, expiry?: string): {
    readonly types: {
        readonly Permit: {
            name: string;
            type: string;
        }[];
    };
    readonly domain: {
        readonly name: string;
        readonly version: string;
        readonly chainId: number;
        readonly verifyingContract: string;
    };
    readonly message: {
        readonly holder: string;
        readonly spender: string;
        readonly nonce: string;
        readonly expiry: string;
        readonly allowed: boolean;
    };
};
export declare function permit2Contract(): Promise<import("ethers").Contract>;
export declare function getPermit(owner: Wallet | SignerWithAddress, permitContract: ERC20Permit, tokenVersion: string, chainId: number, spender: string, value: string, deadline?: string, compact?: boolean): Promise<string>;
export declare function getPermit2(owner: Wallet | SignerWithAddress, token: string, chainId: number, spender: string, amount: bigint, compact?: boolean, expiration?: bigint, sigDeadline?: bigint): Promise<string>;
export declare function getPermitLikeDai(holder: Wallet | SignerWithAddress, permitContract: DaiLikePermitMock, tokenVersion: string, chainId: number, spender: string, allowed: boolean, expiry?: string, compact?: boolean): Promise<string>;
export declare function withTarget(target: bigint | string, data: bigint | string): string;
export declare function compressPermit(permit: string): string;
export declare function decompressPermit(permit: string, token: string, owner: string, spender: string): string;
