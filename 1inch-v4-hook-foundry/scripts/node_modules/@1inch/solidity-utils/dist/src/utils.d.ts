import '@nomicfoundation/hardhat-ethers';
import { BaseContract, BigNumberish, BytesLike, Contract, ContractTransactionReceipt, ContractTransactionResponse, JsonRpcProvider, Signer, Wallet } from 'ethers';
import { DeployOptions, DeployResult } from 'hardhat-deploy/types';
import { constants } from './prelude';
interface DeployContractOptions {
    contractName: string;
    constructorArgs?: any[];
    deployments: {
        deploy: (name: string, options: DeployOptions) => Promise<DeployResult>;
    };
    deployer: string;
    deploymentName?: string;
    skipVerify?: boolean;
    skipIfAlreadyDeployed?: boolean;
    gasPrice?: bigint;
    maxPriorityFeePerGas?: bigint;
    maxFeePerGas?: bigint;
    log?: boolean;
    waitConfirmations?: number;
}
export declare function deployAndGetContract({ contractName, constructorArgs, deployments, deployer, deploymentName, skipVerify, skipIfAlreadyDeployed, gasPrice, maxPriorityFeePerGas, maxFeePerGas, log, waitConfirmations, }: DeployContractOptions): Promise<Contract>;
export declare function timeIncreaseTo(seconds: number | string): Promise<void>;
export declare function deployContract(name: string, parameters?: Array<BigNumberish>): Promise<BaseContract>;
export declare function deployContractFromBytecode(abi: any[], bytecode: BytesLike, parameters?: Array<BigNumberish>, signer?: Signer): Promise<BaseContract>;
type Token = {
    balanceOf: (address: string) => Promise<bigint>;
    getAddress: () => Promise<string>;
};
type TrackReceivedTokenAndTxResult = [bigint, ContractTransactionReceipt | TrackReceivedTokenAndTxResult];
export declare function trackReceivedTokenAndTx<T extends unknown[]>(provider: JsonRpcProvider | {
    getBalance: (address: string) => Promise<bigint>;
}, token: Token | {
    address: typeof constants.ZERO_ADDRESS;
} | {
    address: typeof constants.EEE_ADDRESS;
}, wallet: string, txPromise: (...args: T) => Promise<ContractTransactionResponse | TrackReceivedTokenAndTxResult>, ...args: T): Promise<TrackReceivedTokenAndTxResult>;
export declare function fixSignature(signature: string): string;
export declare function signMessage(signer: Wallet | {
    signMessage: (messageHex: string | Uint8Array) => Promise<string>;
}, messageHex?: string | Uint8Array): Promise<string>;
export declare function countInstructions(provider: JsonRpcProvider | {
    send: (method: string, params: unknown[]) => Promise<any>;
}, txHash: string, instructions: string[]): Promise<number[]>;
export {};
