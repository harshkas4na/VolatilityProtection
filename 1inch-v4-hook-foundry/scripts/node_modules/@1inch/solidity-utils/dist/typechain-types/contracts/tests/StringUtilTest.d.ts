import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";
export interface StringUtilTestInterface extends Interface {
    getFunction(nameOrSignature: "toHex" | "toHexBytes" | "toHexNaive" | "toHexNaiveBytes"): FunctionFragment;
    encodeFunctionData(functionFragment: "toHex", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "toHexBytes", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "toHexNaive", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "toHexNaiveBytes", values: [BytesLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "toHex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toHexBytes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toHexNaive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toHexNaiveBytes", data: BytesLike): Result;
}
export interface StringUtilTest extends BaseContract {
    connect(runner?: ContractRunner | null): StringUtilTest;
    waitForDeployment(): Promise<this>;
    interface: StringUtilTestInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    toHex: TypedContractMethod<[
        value: BigNumberish,
        expectedGasCost: BigNumberish
    ], [
        string
    ], "view">;
    toHexBytes: TypedContractMethod<[
        data: BytesLike,
        expectedGasCost: BigNumberish
    ], [
        string
    ], "view">;
    toHexNaive: TypedContractMethod<[
        value: BigNumberish,
        expectedGasCost: BigNumberish
    ], [
        string
    ], "view">;
    toHexNaiveBytes: TypedContractMethod<[
        data: BytesLike,
        expectedGasCost: BigNumberish
    ], [
        string
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "toHex"): TypedContractMethod<[
        value: BigNumberish,
        expectedGasCost: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "toHexBytes"): TypedContractMethod<[
        data: BytesLike,
        expectedGasCost: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "toHexNaive"): TypedContractMethod<[
        value: BigNumberish,
        expectedGasCost: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "toHexNaiveBytes"): TypedContractMethod<[
        data: BytesLike,
        expectedGasCost: BigNumberish
    ], [
        string
    ], "view">;
    filters: {};
}
