import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";
export interface RevertReasonParserTestInterface extends Interface {
    getFunction(nameOrSignature: "assertion" | "emptyRevert" | "emptyStringRevert" | "longStringRevert" | "nonEmptyRevert" | "testAssertion" | "testEmptyRevert" | "testEmptyStringRevert" | "testLongStringRevert" | "testNonEmptyRevert" | "testParseWithThrow" | "testWithThrow" | "withoutAssertion"): FunctionFragment;
    encodeFunctionData(functionFragment: "assertion", values?: undefined): string;
    encodeFunctionData(functionFragment: "emptyRevert", values?: undefined): string;
    encodeFunctionData(functionFragment: "emptyStringRevert", values?: undefined): string;
    encodeFunctionData(functionFragment: "longStringRevert", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonEmptyRevert", values?: undefined): string;
    encodeFunctionData(functionFragment: "testAssertion", values?: undefined): string;
    encodeFunctionData(functionFragment: "testEmptyRevert", values?: undefined): string;
    encodeFunctionData(functionFragment: "testEmptyStringRevert", values?: undefined): string;
    encodeFunctionData(functionFragment: "testLongStringRevert", values?: undefined): string;
    encodeFunctionData(functionFragment: "testNonEmptyRevert", values?: undefined): string;
    encodeFunctionData(functionFragment: "testParseWithThrow", values?: undefined): string;
    encodeFunctionData(functionFragment: "testWithThrow", values?: undefined): string;
    encodeFunctionData(functionFragment: "withoutAssertion", values?: undefined): string;
    decodeFunctionResult(functionFragment: "assertion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emptyRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emptyStringRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "longStringRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonEmptyRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testAssertion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testEmptyRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testEmptyStringRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testLongStringRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testNonEmptyRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testParseWithThrow", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testWithThrow", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withoutAssertion", data: BytesLike): Result;
}
export interface RevertReasonParserTest extends BaseContract {
    connect(runner?: ContractRunner | null): RevertReasonParserTest;
    waitForDeployment(): Promise<this>;
    interface: RevertReasonParserTestInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    assertion: TypedContractMethod<[], [void], "view">;
    emptyRevert: TypedContractMethod<[], [void], "view">;
    emptyStringRevert: TypedContractMethod<[], [void], "view">;
    longStringRevert: TypedContractMethod<[], [void], "view">;
    nonEmptyRevert: TypedContractMethod<[], [void], "view">;
    testAssertion: TypedContractMethod<[], [void], "view">;
    testEmptyRevert: TypedContractMethod<[], [void], "view">;
    testEmptyStringRevert: TypedContractMethod<[], [void], "view">;
    testLongStringRevert: TypedContractMethod<[], [void], "view">;
    testNonEmptyRevert: TypedContractMethod<[], [void], "view">;
    testParseWithThrow: TypedContractMethod<[], [void], "view">;
    testWithThrow: TypedContractMethod<[], [void], "view">;
    withoutAssertion: TypedContractMethod<[], [void], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "assertion"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "emptyRevert"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "emptyStringRevert"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "longStringRevert"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "nonEmptyRevert"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "testAssertion"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "testEmptyRevert"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "testEmptyStringRevert"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "testLongStringRevert"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "testNonEmptyRevert"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "testParseWithThrow"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "testWithThrow"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "withoutAssertion"): TypedContractMethod<[], [void], "view">;
    filters: {};
}
