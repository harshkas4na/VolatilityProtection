import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../../common";
export interface AddressArrayMockInterface extends Interface {
    getFunction(nameOrSignature: "at" | "get" | "length" | "pop" | "push" | "set"): FunctionFragment;
    encodeFunctionData(functionFragment: "at", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "get", values?: undefined): string;
    encodeFunctionData(functionFragment: "length", values?: undefined): string;
    encodeFunctionData(functionFragment: "pop", values?: undefined): string;
    encodeFunctionData(functionFragment: "push", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "set", values: [BigNumberish, AddressLike]): string;
    decodeFunctionResult(functionFragment: "at", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
}
export interface AddressArrayMock extends BaseContract {
    connect(runner?: ContractRunner | null): AddressArrayMock;
    waitForDeployment(): Promise<this>;
    interface: AddressArrayMockInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    at: TypedContractMethod<[i: BigNumberish], [string], "view">;
    get: TypedContractMethod<[], [string[]], "view">;
    length: TypedContractMethod<[], [bigint], "view">;
    pop: TypedContractMethod<[], [void], "nonpayable">;
    push: TypedContractMethod<[account: AddressLike], [bigint], "nonpayable">;
    set: TypedContractMethod<[
        index: BigNumberish,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "at"): TypedContractMethod<[i: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "get"): TypedContractMethod<[], [string[]], "view">;
    getFunction(nameOrSignature: "length"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "pop"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "push"): TypedContractMethod<[account: AddressLike], [bigint], "nonpayable">;
    getFunction(nameOrSignature: "set"): TypedContractMethod<[
        index: BigNumberish,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    filters: {};
}
