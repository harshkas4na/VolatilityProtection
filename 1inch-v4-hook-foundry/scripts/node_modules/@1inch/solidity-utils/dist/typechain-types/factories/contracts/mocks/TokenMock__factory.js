"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "string",
                name: "name",
                type: "string",
            },
            {
                internalType: "string",
                name: "symbol",
                type: "string",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "allowance",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "needed",
                type: "uint256",
            },
        ],
        name: "ERC20InsufficientAllowance",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "sender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "balance",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "needed",
                type: "uint256",
            },
        ],
        name: "ERC20InsufficientBalance",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "approver",
                type: "address",
            },
        ],
        name: "ERC20InvalidApprover",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receiver",
                type: "address",
            },
        ],
        name: "ERC20InvalidReceiver",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "sender",
                type: "address",
            },
        ],
        name: "ERC20InvalidSender",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
        ],
        name: "ERC20InvalidSpender",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address",
            },
        ],
        name: "OwnableInvalidOwner",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "OwnableUnauthorizedAccount",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "Approval",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "Transfer",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address",
            },
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "burn",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "mint",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "symbol",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x6080604052346200036757620012b0803803806200001d816200036b565b928339810190604081830312620003675780516001600160401b03908181116200036757836200004f91840162000391565b916020938482015183811162000367576200006b920162000391565b825182811162000272576003918254916001958684811c941680156200035c575b8885101462000348578190601f94858111620002f5575b50889085831160011462000292575f9262000286575b50505f1982861b1c191690861b1783555b8051938411620002725760049586548681811c9116801562000267575b8282101462000254578381116200020c575b5080928511600114620001a257509383949184925f9562000196575b50501b925f19911b1c19161781555b33156200017f5760058054336001600160a01b03198216811790925560405191906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3610eae9081620004028239f35b6024905f60405191631e4fbdf760e01b8352820152fd5b015193505f8062000115565b92919084601f198116885f52855f20955f905b89838310620001f15750505010620001d7575b50505050811b01815562000124565b01519060f8845f19921b161c191690555f808080620001c8565b858701518955909701969485019488935090810190620001b5565b875f52815f208480880160051c8201928489106200024a575b0160051c019087905b8281106200023e575050620000f9565b5f81550187906200022e565b9250819262000225565b602288634e487b7160e01b5f525260245ffd5b90607f1690620000e7565b634e487b7160e01b5f52604160045260245ffd5b015190505f80620000b9565b90889350601f19831691875f528a5f20925f5b8c828210620002de5750508411620002c6575b505050811b018355620000ca565b01515f1983881b60f8161c191690555f8080620002b8565b8385015186558c97909501949384019301620002a5565b909150855f52885f208580850160051c8201928b86106200033e575b918a91869594930160051c01915b8281106200032f575050620000a3565b5f81558594508a91016200031f565b9250819262000311565b634e487b7160e01b5f52602260045260245ffd5b93607f16936200008c565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176200027257604052565b919080601f84011215620003675782516001600160401b0381116200027257602090620003c7601f8201601f191683016200036b565b9281845282828701011162000367575f5b818110620003ed5750825f9394955001015290565b8581018301518482018401528201620003d856fe608060409080825260049081361015610016575f80fd5b5f3560e01c90816306fdde0314610afe57508063095ea7b3146109f857806318160ddd146109bc57806323b872dd14610835578063313ce567146107fc57806340c10f19146106f157806370a0823114610690578063715018a6146105f45780638da5cb5b146105a257806395d89b41146103aa5780639dc29fac14610263578063a9059cbb14610215578063dd62ed3e146101a05763f2fde38b146100ba575f80fd5b3461019c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c576100f1610ca4565b906100fa610e27565b73ffffffffffffffffffffffffffffffffffffffff80921692831561016d575050600554827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b905f60249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b5f80fd5b823461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c576020906101da610ca4565b6101e2610cc7565b9073ffffffffffffffffffffffffffffffffffffffff8091165f5260018452825f2091165f528252805f20549051908152f35b823461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5760209061025c610252610ca4565b6024359033610cea565b5160018152f35b50903461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5761029b610ca4565b90602435926102a8610e27565b73ffffffffffffffffffffffffffffffffffffffff831692831561037b57835f525f602052825f20549185831061031c575f857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020898881898688528785520381872055816002540360025551908152a3005b610377868486519485947fe450d38c000000000000000000000000000000000000000000000000000000008652850160409194939273ffffffffffffffffffffffffffffffffffffffff606083019616825260208201520152565b0390fd5b505f60249251917f96c6fd1e000000000000000000000000000000000000000000000000000000008352820152fd5b503461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5781515f928254936001948060011c60018216968715610598575b602092838310891461056c57869798838897985290815f146105115750600114610496575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff84118385101761046a5750829182610466925282610c40565b0390f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f888152929493507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106104fb57505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f92820101918193610418565b80548885018701528794509285019281016104c0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610418565b6022887f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b90607f16906103f3565b823461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5760209073ffffffffffffffffffffffffffffffffffffffff600554169051908152f35b3461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5761062a610e27565b5f73ffffffffffffffffffffffffffffffffffffffff6005547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b823461019c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5760209073ffffffffffffffffffffffffffffffffffffffff6106e0610ca4565b165f525f8252805f20549051908152f35b50903461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c57610729610ca4565b9073ffffffffffffffffffffffffffffffffffffffff6024359261074b610e27565b169283156107ce57600254908382018092116107a257505f927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a3005b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f60249251917fec442f05000000000000000000000000000000000000000000000000000000008352820152fd5b823461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c576020905160128152f35b503461019c5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5761086d610ca4565b610875610cc7565b906044359273ffffffffffffffffffffffffffffffffffffffff8216805f526001602052855f20335f52602052855f2054917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83036108dd575b60208761025c888888610cea565b85831061097757811561094857331561091957505f9081526001602090815286822033835281529086902091859003909155829061025c6108cf565b6024905f8851917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b6024905f8851917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b86517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018690528291506060010390fd5b823461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c576020906002549051908152f35b50903461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c57610a30610ca4565b602435903315610acf5773ffffffffffffffffffffffffffffffffffffffff16908115610aa05760209350335f5260018452825f20825f52845280835f205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b6024845f8551917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b6024845f8551917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b90503461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c575f92600354936001948060011c60018216968715610c36575b602092838310891461056c57869798838897985290815f146105115750600114610bb95750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff84118385101761046a5750829182610466925282610c40565b60035f908152929493507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610c2057505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f92820101918193610418565b8054888501870152879450928501928101610be5565b90607f1690610b47565b6020808252825181830181905293925f5b858110610c90575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6040809697860101520116010190565b818101830151848201604001528201610c51565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361019c57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361019c57565b9173ffffffffffffffffffffffffffffffffffffffff808416928315610df75716928315610dc757825f525f60205260405f205490828210610d6f5750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602481019190915260448101829052606490fd5b60246040517fec442f050000000000000000000000000000000000000000000000000000000081525f6004820152fd5b60246040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081525f6004820152fd5b73ffffffffffffffffffffffffffffffffffffffff600554163303610e4857565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea26469706673582212203bbd7c0a1c22e4e089794ad07217877c537064bac32a435b5d3030d9027068b864736f6c63430008170033";
const isSuperArgs = (xs) => xs.length > 1;
class TokenMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(name, symbol, overrides) {
        return super.getDeployTransaction(name, symbol, overrides || {});
    }
    deploy(name, symbol, overrides) {
        return super.deploy(name, symbol, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.TokenMock__factory = TokenMock__factory;
TokenMock__factory.bytecode = _bytecode;
TokenMock__factory.abi = _abi;
//# sourceMappingURL=TokenMock__factory.js.map