import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { GasChecker, GasCheckerInterface } from "../../contracts/GasChecker";
type GasCheckerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class GasChecker__factory extends ContractFactory {
    constructor(...args: GasCheckerConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<GasChecker & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): GasChecker__factory;
    static readonly bytecode = "0x608080604052346013576039908160188239f35b5f80fdfe5f80fdfea2646970667358221220886ce04906135d5fa5caeeef59e631f72c9e600e64d5edb10fd1ae273778a94764736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "GasCostDiffers";
        readonly type: "error";
    }];
    static createInterface(): GasCheckerInterface;
    static connect(address: string, runner?: ContractRunner | null): GasChecker;
}
export {};
