import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type { ERC20ReturnFalseMock, ERC20ReturnFalseMockInterface } from "../../../../../contracts/tests/mocks/SafeERC20Helper.sol/ERC20ReturnFalseMock";
type ERC20ReturnFalseMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ERC20ReturnFalseMock__factory extends ContractFactory {
    constructor(...args: ERC20ReturnFalseMockConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ERC20ReturnFalseMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ERC20ReturnFalseMock__factory;
    static readonly bytecode = "0x60808060405234610016576101dd908161001b8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063095ea7b31461009f57806323b872dd146100db57806370a08231146100a4578063a9059cbb1461009f5763dd62ed3e14610050575f80fd5b3461009b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009b5761008761012a565b5061009061014d565b5060206040515f8152f35b5f80fd5b610170565b3461009b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009b5761009061012a565b3461009b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009b5761011261012a565b5061011b61014d565b505f60015560206040515f8152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361009b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361009b57565b3461009b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009b5761011b61012a56fea2646970667358221220985a9e64f86b82fad97c7af3770780f9901c33f6cf3ef71b8a9caa10329bcd8864736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ERC20ReturnFalseMockInterface;
    static connect(address: string, runner?: ContractRunner | null): ERC20ReturnFalseMock;
}
export {};
