import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { PermitableMock, PermitableMockInterface } from "../../../../contracts/tests/mocks/PermitableMock";
type PermitableMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class PermitableMock__factory extends ContractFactory {
    constructor(...args: PermitableMockConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<PermitableMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): PermitableMock__factory;
    static readonly bytecode = "0x6080806040523461001657610496908161001b8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806352d852c11461002f5763c2c3b4561461002f575f80fd5b3461005c5761004a61004036610060565b91309033906100e8565b1561005157005b6040513d5f823e3d90fd5b5f80fd5b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261005c5760043573ffffffffffffffffffffffffffffffffffffffff8116810361005c579160243567ffffffffffffffff9283821161005c578060238301121561005c57816004013593841161005c576024848301011161005c576024019190565b604051949291606484146103a957836048146102e6578360e0146102a957836101001461026a5783606014610193575050506101601461014a576004827f68275857000000000000000000000000000000000000000000000000000000008152fd5b610164826101605f94937f2b67b570000000000000000000000000000000000000000000000000000000008695526004830137826e22d473030f116ddee9f6b43ac78ba35af190565b61016493505f95929486956020936040937f2b67b5700000000000000000000000000000000000000000000000000000000087526004870152602486015260148260508701377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff9181601485013560e01c0183166064880152601884013560e01c608488015260a4870152601c83013560e01c011660c485015261010060e4850152816101048501528280820161012486013701610144830137826e22d473030f116ddee9f6b43ac78ba35af190565b5061010492508491505f949061010086957f8fcbaf0c0000000000000000000000000000000000000000000000000000000087945260048501375af190565b5060e492508491505f949060e086957fd505accf0000000000000000000000000000000000000000000000000000000087945260048501375af190565b6101049350907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f969395879687947f8fcbaf0c0000000000000000000000000000000000000000000000000000000087526004870152602486015260206008602883013592803560e01c60448901527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600482013560e01c016064890152600160848901528360ff1c601b0160a48901520160c48701371660e48401525af190565b60e49350907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f969395879687947fd505accf0000000000000000000000000000000000000000000000000000000087526004870152602486015260206024604483013592828160448a01377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8382013560e01c0160648901528360ff1c601b0160848901520160a48701371660c48401525af19056fea264697066735822122070b7fa8e5541afaae63f1efd2efa3a55255c32b0ffdb48706af2137366059de664736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "permit";
            readonly type: "bytes";
        }];
        readonly name: "mockPermit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "permit";
            readonly type: "bytes";
        }];
        readonly name: "mockPermitCompact";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): PermitableMockInterface;
    static connect(address: string, runner?: ContractRunner | null): PermitableMock;
}
export {};
