import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { ERC1271WalletMock, ERC1271WalletMockInterface } from "../../../../contracts/tests/mocks/ERC1271WalletMock";
type ERC1271WalletMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ERC1271WalletMock__factory extends ContractFactory {
    constructor(...args: ERC1271WalletMockConstructorParams);
    getDeployTransaction(originalOwner: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(originalOwner: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ERC1271WalletMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ERC1271WalletMock__factory;
    static readonly bytecode = "0x6080346100b957601f61053b38819003918201601f19168301916001600160401b038311848410176100bd578084926020946040528339810103126100b957516001600160a01b0390818116908190036100b95780156100a1575f80546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361046990816100d28239f35b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040908082526004361015610014575f80fd5b5f3560e01c9081631626ba7e1461021a57508063715018a6146101805780638da5cb5b1461012f5763f2fde38b1461004a575f80fd5b3461012b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012b576004359073ffffffffffffffffffffffffffffffffffffffff9081831680930361012b576100a56103e3565b82156100fc57505f54827fffffffffffffffffffffffff00000000000000000000000000000000000000008216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b602490517f1e4fbdf70000000000000000000000000000000000000000000000000000000081525f6004820152fd5b5f80fd5b503461012b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012b5760209073ffffffffffffffffffffffffffffffffffffffff5f54169051908152f35b3461012b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012b576101b66103e3565b5f73ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b823461012b57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012b5760243567ffffffffffffffff80821161012b573660238301121561012b57816004013590811161012b576024820191366024838301011161012b576020945f9381938487826041146103cc57505060401461038857505050505f805b610340575b5073ffffffffffffffffffffffffffffffffffffffff805f54169116145f14610318577fffffffff000000000000000000000000000000000000000000000000000000007f1626ba7e00000000000000000000000000000000000000000000000000000000915b5191168152f35b7fffffffff000000000000000000000000000000000000000000000000000000005f91610311565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1606082015110156102aa5783915060805f91600435815282805260015afa505f51836102aa565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60609188604487960135918260ff1c601b018287015289860137169101526102a5565b939094849250606401355f1a8982015201376102a5565b73ffffffffffffffffffffffffffffffffffffffff5f5416330361040357565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea2646970667358221220374d6cdf023bd1f7731216ee9f3ee618f093b393a47b01a902ffc8127979da6264736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "originalOwner";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignature";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "magicValue";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ERC1271WalletMockInterface;
    static connect(address: string, runner?: ContractRunner | null): ERC1271WalletMock;
}
export {};
