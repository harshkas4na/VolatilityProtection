import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type { ERC20ReturnTrueMock, ERC20ReturnTrueMockInterface } from "../../../../../contracts/tests/mocks/SafeERC20Helper.sol/ERC20ReturnTrueMock";
type ERC20ReturnTrueMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ERC20ReturnTrueMock__factory extends ContractFactory {
    constructor(...args: ERC20ReturnTrueMockConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ERC20ReturnTrueMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ERC20ReturnTrueMock__factory;
    static readonly bytecode = "0x6080806040523461001657610217908161001b8239f35b5f80fdfe6040608081526004361015610012575f80fd5b5f3560e01c8063095ea7b3146100bd57806323b872dd146101045780633ba93f26146100c2578063a9059cbb146100bd5763dd62ed3e14610051575f80fd5b346100b957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b95760209073ffffffffffffffffffffffffffffffffffffffff61009f610154565b6100a7610177565b50165f525f8252805f20549051908152f35b5f80fd5b61019a565b50346100b95760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b957335f525f602052600435905f20555f80f35b50346100b95760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b95760209061013f610154565b50610148610177565b505f6001555160018152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100b957565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036100b957565b346100b95760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b9576101d1610154565b505f600155602060405160018152f3fea264697066735822122020901400d6a587e9a33333bd12c61cfa77583bdfd3b7237a825d0799aa09b34b64736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "allowance_";
            readonly type: "uint256";
        }];
        readonly name: "setAllowance";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ERC20ReturnTrueMockInterface;
    static connect(address: string, runner?: ContractRunner | null): ERC20ReturnTrueMock;
}
export {};
