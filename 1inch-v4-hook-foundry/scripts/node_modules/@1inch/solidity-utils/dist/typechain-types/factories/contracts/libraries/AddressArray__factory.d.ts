import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { AddressArray, AddressArrayInterface } from "../../../contracts/libraries/AddressArray";
type AddressArrayConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class AddressArray__factory extends ContractFactory {
    constructor(...args: AddressArrayConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<AddressArray & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): AddressArray__factory;
    static readonly bytecode = "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220cc37775a6ed007c3fc1bb7aeb1d240d05919f24e2b1ca6fd180e3ec2a40f2c0d64736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "IndexOutOfBounds";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OutputArrayTooSmall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PopFromEmptyArray";
        readonly type: "error";
    }];
    static createInterface(): AddressArrayInterface;
    static connect(address: string, runner?: ContractRunner | null): AddressArray;
}
export {};
