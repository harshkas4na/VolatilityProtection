"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasChecker__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "expected",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "actual",
                type: "uint256",
            },
        ],
        name: "GasCostDiffers",
        type: "error",
    },
];
const _bytecode = "0x608080604052346013576039908160188239f35b5f80fdfe5f80fdfea2646970667358221220886ce04906135d5fa5caeeef59e631f72c9e600e64d5edb10fd1ae273778a94764736f6c63430008170033";
const isSuperArgs = (xs) => xs.length > 1;
class GasChecker__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.GasChecker__factory = GasChecker__factory;
GasChecker__factory.bytecode = _bytecode;
GasChecker__factory.abi = _abi;
//# sourceMappingURL=GasChecker__factory.js.map