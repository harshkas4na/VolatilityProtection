import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { ECDSATest, ECDSATestInterface } from "../../../contracts/tests/ECDSATest";
type ECDSATestConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ECDSATest__factory extends ContractFactory {
    constructor(...args: ECDSATestConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ECDSATest & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ECDSATest__factory;
    static readonly bytecode = "0x6080806040523461001657610a05908161001b8239f35b5f80fdfe604060808152600480361015610013575f80fd5b5f3560e01c908163126442731461034f57816319045a25146102de578163238a4d1e146102c05781633f91b7f6146102a25781634cf302cf146102845781634d84f864146102665781635b3cc7c5146102485781637df7a71c146101d8578163918a15cf14610173578163948696cb14610155578163a005410b146100f457508063c479e1b3146100d65763d573e327146100ac575f80fd5b346100d2576020906100c96100c036610456565b92919091610993565b90519015158152f35b5f80fd5b50346100d2576020906100c96100eb366104af565b93929092610940565b82346100d25760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d25773ffffffffffffffffffffffffffffffffffffffff61014d6020936044359060243590356108b0565b915191168152f35b82346100d2576020906100c961016a36610456565b92919091610874565b82346100d25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d2576020917f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f5235601c52603c5f209051908152f35b82346100d257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d25760426020928251907f190100000000000000000000000000000000000000000000000000000000000082523560028201526024356022820152209051908152f35b82346100d2576020906100c961025d366103e4565b929190916107fa565b82346100d2576020906100c961027b366104af565b93929092610798565b82346100d2576020906100c961029936610456565b9291909161073c565b82346100d2576020906100c96102b736610456565b929190916106b2565b82346100d2576020906100c96102d5366103e4565b9291909161064d565b82346100d257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d2576024359167ffffffffffffffff83116100d25761014d73ffffffffffffffffffffffffffffffffffffffff91610348602095369083016103b6565b913561057f565b82346100d25760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d25760243560ff811681036100d25761014d73ffffffffffffffffffffffffffffffffffffffff91602094606435916044359135610516565b9181601f840112156100d25782359167ffffffffffffffff83116100d257602083818601950101116100d257565b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126100d25760043573ffffffffffffffffffffffffffffffffffffffff811681036100d25791602435916044359067ffffffffffffffff82116100d257610452916004016103b6565b9091565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60809101126100d25760043573ffffffffffffffffffffffffffffffffffffffff811681036100d25790602435906044359060643590565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126100d25760043573ffffffffffffffffffffffffffffffffffffffff811681036100d257906024359060443560ff811681036100d257906064359060843590565b91939290935f947f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1831061054b575b50505050565b6020949550915f9391608093604051938452868401526040830152606082015282805260015afa505f51905f808080610545565b6040515f9493909290836041821461063457506040146105ef57505f9150815b6105a7575050565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a16060830151106105d6575050565b6020929350816080915f935282805260015afa505f5190565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160208086940135918260ff1c601b0182860152604085013716606082015261059f565b9160408092508101355f1a60208401528183013761059f565b5f9060209293959495829680604051927f1626ba7e00000000000000000000000000000000000000000000000000000000978885526004850152604060248501528160448501526064840137606401915afa6106a65750565b5f51143d602014169150565b60a5602092935f929695968397604051927f1626ba7e00000000000000000000000000000000000000000000000000000000978885526004850152604060248501526041604485015260648401527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116608484015260ff1c601b0160a48301535afa6106a65750565b60a4602092935f929695968397604051927f1626ba7e000000000000000000000000000000000000000000000000000000009788855260048501526040602485015260406044850152606484015260848301525afa6106a65750565b5f919360a5916020949796978498604051937f1626ba7e0000000000000000000000000000000000000000000000000000000098898652600486015260406024860152604160448601526064850152608484015260a48301535afa6106a65750565b92919073ffffffffffffffffffffffffffffffffffffffff808516801561086a576040851491821561085f575b82610848575b505061083f5761083c9361064d565b90565b50505050600190565b90915061085685858561057f565b16145f8061082d565b604186149250610827565b5050505050505f90565b92919073ffffffffffffffffffffffffffffffffffffffff80851690811561086a576108a18585856108b0565b161461083f5761083c9361073c565b9092915f937f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8216917f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a183106109065750505050565b6020949550915f939160809360405193845260ff1c601b01868401526040830152606082015282805260015afa505f51905f808080610545565b9392919073ffffffffffffffffffffffffffffffffffffffff8086169081156109885761096f86868686610516565b161461097e5761083c94610798565b5050505050600190565b505050505050505f90565b92919073ffffffffffffffffffffffffffffffffffffffff80851690811561086a576109c08585856108b0565b161461083f5761083c936106b256fea2646970667358221220d1402bf5b8dea2ba970330bfc0190b92279f95fdfb60abd2065687610973896a64736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignature";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "vs";
            readonly type: "bytes32";
        }];
        readonly name: "isValidSignature65";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "vs";
            readonly type: "bytes32";
        }];
        readonly name: "isValidSignature_r_vs";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "isValidSignature_v_r_s";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "recover";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "recoverOrIsValidSignature";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "vs";
            readonly type: "bytes32";
        }];
        readonly name: "recoverOrIsValidSignature65";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "vs";
            readonly type: "bytes32";
        }];
        readonly name: "recoverOrIsValidSignature_r_vs";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "recoverOrIsValidSignature_v_r_s";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "vs";
            readonly type: "bytes32";
        }];
        readonly name: "recover_r_vs";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "recover_v_r_s";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "toEthSignedMessageHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "res";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "domainSeparator";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "structHash";
            readonly type: "bytes32";
        }];
        readonly name: "toTypedDataHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "res";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ECDSATestInterface;
    static connect(address: string, runner?: ContractRunner | null): ECDSATest;
}
export {};
