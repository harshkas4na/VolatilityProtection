import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { AddressLibMock, AddressLibMockInterface } from "../../../../contracts/tests/mocks/AddressLibMock";
type AddressLibMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class AddressLibMock__factory extends ContractFactory {
    constructor(...args: AddressLibMockConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<AddressLibMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): AddressLibMock__factory;
    static readonly bytecode = "0x608080604052346100165761015a908161001b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081639507d39a146100a157508063d3becb071461008c578063dab82ecd146100675763fc25803114610048575f80fd5b34610063576020610058366100f0565b604051911615158152f35b5f80fd5b3461006357602067ffffffffffffffff610080366100f0565b9190604051921c168152f35b3461006357602063ffffffff610080366100f0565b346100635760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100635760209073ffffffffffffffffffffffffffffffffffffffff600435168152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261006357600435906024359056fea2646970667358221220259c2b482da5bfd055ded277c99f2ebb313c073724390594bb2b33e5645c483264736f6c63430008170033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "Address";
            readonly name: "a";
            readonly type: "uint256";
        }];
        readonly name: "get";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "Address";
            readonly name: "a";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "flag";
            readonly type: "uint256";
        }];
        readonly name: "getFlag";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "Address";
            readonly name: "a";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "offset";
            readonly type: "uint256";
        }];
        readonly name: "getUint32";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "Address";
            readonly name: "a";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "offset";
            readonly type: "uint256";
        }];
        readonly name: "getUint64";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): AddressLibMockInterface;
    static connect(address: string, runner?: ContractRunner | null): AddressLibMock;
}
export {};
