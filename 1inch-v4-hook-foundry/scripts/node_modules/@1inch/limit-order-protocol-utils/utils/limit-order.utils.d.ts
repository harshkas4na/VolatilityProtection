import { Series } from '../model/series-nonce-manager.model';
import { ErrorResponse } from '../limit-order-protocol.facade';
export declare const UINT32_BITS: bigint;
export declare const UINT32_BITMASK: bigint;
export declare const UINT16_BITMASK: bigint;
export declare const UINT40_BITMASK: bigint;
export declare const UINT48_BITMASK: bigint;
export declare const ADDRESS_MASK: bigint;
export declare function trim0x(hexString: string): string;
export declare function getOffsets(data: string[]): bigint;
export declare function parseInteractionForField(offsets: bigint, interactions: string, field: number): string;
export declare function getOffsetForInteraction(offsets: bigint, field: number): {
    fromByte: number;
    toByte: number;
};
export declare function getMakingAmountForRFQ(amount: string): string;
export declare function setN(value: bigint, bitNumber: number | bigint, flag: boolean): bigint;
export declare function getN(value: bigint, n: bigint): bigint;
export declare const TIMESTAMP_AND_NOUNCE_SELECTOR = "2cc2878d";
export declare const ARBITRARY_STATIC_CALL_SELECTOR = "7638f1fe";
/**
 *
 * @param calldata Any variant of calldata, such as
 * - complete predicate
 * - full method calldata
 * - arguments calldata
 * - argument value as hex or bigint
 * @param isSeriesNonceManager Omit if you dont know exacly.
 * Loose `arbitraryStaticCall` check will be performed
 * @returns
 */
export declare function unpackTimestampAndNoncePredicate(calldata: string | bigint, isSeriesNonceManager?: boolean | null): {
    series?: Series;
    address: string;
    nonce: bigint;
    timestamp: bigint;
};
export declare function packSkipPermitAndThresholdAmount(thresholdAmount: string, skipPermit: boolean): string;
export declare function extractWeb3OriginalErrorData(error: ErrorResponse | Error | string): string | null;
export declare function compactSignature(signature: string): {
    r: string;
    vs: string;
};
