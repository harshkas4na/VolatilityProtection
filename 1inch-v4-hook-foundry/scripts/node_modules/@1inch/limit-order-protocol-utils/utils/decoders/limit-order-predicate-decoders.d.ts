import { CallArguments, DecodersImplementation, PredicateFn } from "../../limit-order-predicate.decoder";
import { FunctionFragment } from "@ethersproject/abi";
export declare class LimitOrderPredicateDecoders implements DecodersImplementation<LimitOrderPredicateDecoders> {
    or: (fn: FunctionFragment, data: CallArguments, contract: string) => PredicateFn;
    and: (fn: FunctionFragment, data: CallArguments, contract: string) => PredicateFn;
    lt: (fn: FunctionFragment, data: CallArguments, contract: string) => PredicateFn;
    gt: (fn: FunctionFragment, data: CallArguments, contract: string) => PredicateFn;
    eq: (fn: FunctionFragment, data: CallArguments, contract: string) => PredicateFn;
    arbitraryStaticCall(fn: FunctionFragment, data: CallArguments, contract: string): PredicateFn;
    timestampBelow(fn: FunctionFragment, data: CallArguments, contract: string): PredicateFn;
    timestampBelowAndNonceEquals(fn: FunctionFragment, data: CallArguments, contract: string): PredicateFn;
    nonceEquals(fn: FunctionFragment, data: CallArguments, contract: string): PredicateFn;
    nonce(fn: FunctionFragment, data: CallArguments, contract: string): PredicateFn;
    private logicalDecoder;
    private comparingDecoder;
}
