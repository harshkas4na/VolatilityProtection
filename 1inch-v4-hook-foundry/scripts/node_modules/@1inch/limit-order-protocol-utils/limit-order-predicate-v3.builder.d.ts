import { Nonce, PredicateTimestamp } from "./model/limit-order-protocol.model";
import { LimitOrderPredicateCallData } from "./limit-order-predicate.builder";
import { AbstractSmartcontractFacade } from "./utils/abstract-facade";
import { LimitOrderProtocolV3Facade } from "./limit-order-protocol-v3.facade";
export declare class LimitOrderPredicateV3Builder {
    private readonly facade;
    constructor(facade: LimitOrderProtocolV3Facade);
    and: (...predicates: LimitOrderPredicateCallData[]) => LimitOrderPredicateCallData;
    or: (...predicates: LimitOrderPredicateCallData[]) => LimitOrderPredicateCallData;
    eq: (value: string, callData: string) => LimitOrderPredicateCallData;
    lt: (value: string, callData: string) => LimitOrderPredicateCallData;
    gt: (value: string, callData: string) => LimitOrderPredicateCallData;
    nonce: (makerAddress: string) => LimitOrderPredicateCallData;
    nonceEquals: (makerAddress: string, makerNonce: Nonce) => LimitOrderPredicateCallData;
    /**
     * @param timestamp seconds unit
     */
    timestampBelow: (timestamp: PredicateTimestamp) => LimitOrderPredicateCallData;
    /**
     * @param timestamp seconds unit
     */
    timestampBelowAndNonceEquals: (timestamp: PredicateTimestamp, nonce: Nonce, address: string) => LimitOrderPredicateCallData;
    arbitraryStaticCall: (target: string | AbstractSmartcontractFacade<string>, callData: string) => LimitOrderPredicateCallData;
}
