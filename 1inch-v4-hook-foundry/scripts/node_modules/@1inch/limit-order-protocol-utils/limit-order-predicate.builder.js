import { LimitOrderProtocolMethods, } from './model/limit-order-protocol.model';
import { AbstractSmartcontractFacade } from './utils/abstract-facade';
import { LimitOrderBuilder } from './limit-order.builder';
/**
 * All methods is lambdas to preserve `this` context and allow DSL-like usage
 */
export class LimitOrderPredicateBuilder {
    constructor(facade) {
        this.facade = facade;
        this.and = (...predicates) => {
            const { offsets, data } = LimitOrderBuilder.joinStaticCalls(predicates);
            return this.facade.getContractCallData(LimitOrderProtocolMethods.and, [
                offsets,
                data,
            ]);
        };
        this.or = (...predicates) => {
            const { offsets, data } = LimitOrderBuilder.joinStaticCalls(predicates);
            return this.facade.getContractCallData(LimitOrderProtocolMethods.or, [
                offsets,
                data,
            ]);
        };
        this.eq = (value, callData) => {
            return this.facade.getContractCallData(LimitOrderProtocolMethods.eq, [
                value,
                callData,
            ]);
        };
        this.lt = (value, callData) => {
            return this.facade.getContractCallData(LimitOrderProtocolMethods.lt, [
                value,
                callData,
            ]);
        };
        this.gt = (value, callData) => {
            return this.facade.getContractCallData(LimitOrderProtocolMethods.gt, [
                value,
                callData,
            ]);
        };
        this.arbitraryStaticCall = (target, callData) => {
            const address = target instanceof AbstractSmartcontractFacade
                ? target.contractAddress
                : target;
            if (address.toLowerCase() === this.facade.contractAddress.toLowerCase()) {
                console.warn('Unnecessary arbitraryStaticCall(). '
                    + 'Omit it when interacting with limit-order-protocol methods.');
                return callData;
            }
            return this.facade.getContractCallData(LimitOrderProtocolMethods.arbitraryStaticCall, [
                address,
                callData,
            ]);
        };
    }
}
//# sourceMappingURL=limit-order-predicate.builder.js.map