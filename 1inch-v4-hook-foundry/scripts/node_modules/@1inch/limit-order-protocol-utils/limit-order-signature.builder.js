import { EIP712_DOMAIN } from "./limit-order-protocol.const";
import { SignTypedDataVersion, TypedDataUtils } from "@metamask/eth-sig-util";
export class LimitOrderSignatureBuilder {
    constructor(providerConnector, eip712Params) {
        this.providerConnector = providerConnector;
        this.eip712Params = eip712Params;
    }
    buildLimitOrderTypedData(order, chainId, verifyingContract) {
        return {
            primaryType: 'Order',
            types: {
                EIP712Domain: EIP712_DOMAIN,
                Order: this.eip712Params.orderStructure,
            },
            domain: {
                name: this.eip712Params.domainName,
                version: this.eip712Params.version,
                chainId: chainId,
                verifyingContract: verifyingContract,
            },
            message: order,
        };
    }
    buildTypedDataAndSign(order, chainId, verifyingContract, wallet) {
        const typedData = this.buildLimitOrderTypedData(order, chainId, verifyingContract);
        return this.buildOrderSignature(wallet, typedData);
    }
    buildOrderSignature(wallet, typedData) {
        const dataHash = TypedDataUtils.hashStruct(typedData.primaryType, typedData.message, typedData.types, SignTypedDataVersion.V4).toString('hex');
        return this.providerConnector.signTypedData(wallet, typedData, dataHash);
    }
}
//# sourceMappingURL=limit-order-signature.builder.js.map