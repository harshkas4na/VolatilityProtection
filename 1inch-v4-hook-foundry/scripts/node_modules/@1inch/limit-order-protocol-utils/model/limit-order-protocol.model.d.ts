export type LimitOrderSignature = string;
export type LimitOrderHash = string;
export interface LimitOrderData {
    maker: Address;
    receiver?: Address;
    makerAsset: Address;
    takerAsset: Address;
    makingAmount: string;
    takingAmount: string;
    makerTraits?: bigint | string;
    salt?: string | bigint;
}
export type LimitOrderDataLegacy = {
    makerAddress: string;
    receiver?: string;
    allowedSender?: string;
    makerAssetAddress: string;
    takerAssetAddress: string;
    makingAmount: string;
    takingAmount: string;
    predicate?: string;
    permit?: string;
    getMakingAmount?: string;
    getTakingAmount?: string;
    preInteraction?: string;
    postInteraction?: string;
    salt?: string;
};
export type ExtensionParamsWithCustomData = Partial<ExtensionParams> & {
    customData?: string;
};
export interface ExtensionParams {
    makerAssetSuffix: string;
    takerAssetSuffix: string;
    makingAmountGetter: string;
    takingAmountGetter: string;
    predicate: string;
    permit: string;
    preInteraction: string;
    postInteraction: string;
}
export type Address = string;
export type MakerTraits = string;
/**
 * Compatible with EIP712Object
 */
export type LimitOrder = {
    salt: string;
    maker: Address;
    receiver: Address;
    makerAsset: Address;
    takerAsset: Address;
    makingAmount: string;
    takingAmount: string;
    makerTraits: MakerTraits;
};
export type LimitOrderWithExtension = LimitOrder & {
    extension: string;
};
/**
 * Compatible with EIP712Object
 */
export type LimitOrderLegacy = {
    salt: string;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    receiver: string;
    allowedSender: string;
    makingAmount: string;
    takingAmount: string;
    offsets: string;
    interactions: string;
} & LimitOrderInteractions;
/**
 * Partial from LimitOrder
 */
export type LimitOrderInteractions = {
    offsets: string;
    interactions: string;
};
/**
 * uint40
 */
export type Nonce = number | bigint;
/**
 * seconds unit40
 */
export type PredicateTimestamp = number | bigint;
export declare const InteractionsFieldsV3: {
    readonly makerAssetData: 0;
    readonly takerAssetData: 1;
    readonly getMakingAmount: 2;
    readonly getTakingAmount: 3;
    readonly predicate: 4;
    readonly permit: 5;
    readonly preInteraction: 6;
    readonly postInteraction: 7;
};
export declare const InteractionsFields: {
    readonly makerAssetSuffix: 0;
    readonly takerAssetSuffix: 1;
    readonly makingAmountGetter: 2;
    readonly takingAmountGetter: 3;
    readonly predicate: 4;
    readonly permit: 5;
    readonly preInteraction: 6;
    readonly postInteraction: 7;
};
export interface ParsedMakerTraits {
    allowedSender: Address;
    shouldCheckEpoch: boolean;
    allowPartialFill: boolean;
    allowPriceImprovement: boolean;
    allowMultipleFills: boolean;
    usePermit2: boolean;
    unwrapWeth: boolean;
    expiry: number;
    nonce: bigint;
    series: bigint;
    hasExtension: boolean;
}
export type InteractionName = keyof typeof InteractionsFields;
export type Interactions = {
    [key in InteractionName]: string;
};
export interface UnpackedExtension {
    interactions: Interactions;
    customData: string;
}
export type InteractionV3Name = keyof typeof InteractionsFieldsV3;
export type InteractionsV3 = {
    [key in InteractionV3Name]: string;
};
export type AllInteractions = typeof InteractionsFields | typeof InteractionsFieldsV3;
export declare enum LimitOrderProtocolMethodsV3 {
    cancelOrder = "cancelOrder",
    timestampBelow = "timestampBelow",
    timestampBelowAndNonceEquals = "timestampBelowAndNonceEquals",
    checkPredicate = "checkPredicate",
    increaseNonce = "increaseNonce",
    nonce = "nonce",
    advanceNonce = "advanceNonce",
    and = "and",
    or = "or",
    eq = "eq",
    lt = "lt",
    gt = "gt",
    nonceEquals = "nonceEquals",
    arbitraryStaticCall = "arbitraryStaticCall",
    remaining = "remaining",
    hashOrder = "hashOrder",
    isValidSignature = "isValidSignature"
}
export declare enum LimitOrderProtocolMethods {
    getMakingAmount = "getMakingAmount",
    getTakingAmount = "getTakingAmount",
    arbitraryStaticCall = "arbitraryStaticCall",
    fillOrder = "fillOrder",
    fillOrderArgs = "fillOrderArgs",
    cancelOrder = "cancelOrder",
    permitAndCall = "permitAndCall",
    increaseEpoch = "increaseEpoch",
    remainingInvalidatorForOrder = "remainingInvalidatorForOrder",
    rawRemainingInvalidatorForOrder = "rawRemainingInvalidatorForOrder",
    epoch = "epoch",
    checkPredicate = "checkPredicate",
    advanceNonce = "advanceNonce",
    increaseNonce = "increaseNonce",
    hashOrder = "hashOrder",
    and = "and",
    or = "or",
    eq = "eq",
    lt = "lt",
    gt = "gt",
    nonceEquals = "nonceEquals",
    transferFrom = "transferFrom"
}
export type TakerTraits = string;
