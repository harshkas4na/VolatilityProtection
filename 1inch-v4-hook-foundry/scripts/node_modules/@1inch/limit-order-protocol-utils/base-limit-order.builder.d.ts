import { ProviderConnector } from "./connector/provider.connector";
import { EIP712ParamsExtended } from "./limit-order.builder";
import { LimitOrderHash, LimitOrderSignature } from "./model/limit-order-protocol.model";
import { Address } from "./model/eth.model";
import { EIP712Object, EIP712TypedData } from "./model/eip712.model";
export declare abstract class BaseLimitOrderBuilder<OrderType extends EIP712Object> {
    protected readonly providerConnector: ProviderConnector;
    protected readonly eip712ParamsExtended: EIP712ParamsExtended;
    private readonly signatureBuilder;
    constructor(providerConnector: ProviderConnector, eip712ParamsExtended: EIP712ParamsExtended);
    static joinStaticCalls(data: string[]): {
        offsets: bigint;
        data: string;
    };
    buildLimitOrderTypedData(order: OrderType, chainId: bigint, verifyingContract: Address): EIP712TypedData;
    buildTypedDataAndSign(order: OrderType, chainId: bigint, verifyingContract: Address, wallet: Address): Promise<LimitOrderSignature>;
    buildOrderSignature(wallet: Address, typedData: EIP712TypedData): Promise<LimitOrderSignature>;
    buildLimitOrderHash(orderTypedData: EIP712TypedData): LimitOrderHash;
}
