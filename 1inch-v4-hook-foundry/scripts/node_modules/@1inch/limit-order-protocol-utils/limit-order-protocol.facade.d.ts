import { Address, LimitOrder, LimitOrderProtocolMethods, LimitOrderProtocolMethodsV3, LimitOrderSignature, MakerTraits, TakerTraits } from './model/limit-order-protocol.model';
import { AbstractSmartcontractFacade } from './utils/abstract-facade';
import { Series } from "./model/series-nonce-manager.model";
export interface FillOrderParamsWithTakerTraits {
    order: LimitOrder;
    signature: LimitOrderSignature;
    amount: string;
    takerTraits: TakerTraits;
}
export type FillOrderArgs = FillOrderParamsWithTakerTraits & {
    args: string;
};
export type PermitAndCallParams = FillOrderArgs & {
    target: Address;
    permitToken: Address;
    permit: string;
    interaction: string;
};
export interface ErrorResponse extends Error {
    data: string;
}
export declare class LimitOrderProtocolFacade extends AbstractSmartcontractFacade<LimitOrderProtocolMethods | LimitOrderProtocolMethodsV3> {
    ABI: import(".").AbiItem[];
    fillLimitOrder(params: FillOrderParamsWithTakerTraits): string;
    fillLimitOrderArgs(params: FillOrderArgs): string;
    permitAndCall(params: PermitAndCallParams): string;
    cancelLimitOrder(makerTraits: MakerTraits, orderHash: string): string;
    increaseEpoch(series: Series): string;
    epoch(maker: Address, series: Series): Promise<bigint>;
    checkPredicate(predicate: string): Promise<boolean>;
    remainingInvalidatorForOrder(maker: Address, orderHash: string): Promise<bigint>;
    rawRemainingInvalidatorForOrder(maker: Address, orderHash: string): Promise<bigint>;
    domainSeparator(): Promise<string>;
    orderHash(order: LimitOrder): Promise<string>;
    private makeViewCall;
}
