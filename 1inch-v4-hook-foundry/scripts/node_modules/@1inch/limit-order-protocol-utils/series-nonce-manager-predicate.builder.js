import { SeriesNonceManagerMethods } from "./model/series-nonce-manager.model";
import { AbstractPredicateBuilder } from "./utils/abstract-predicate-builder";
import { ZX } from "./limit-order-protocol.const";
import { assertSeries } from "./utils/series-nonce-manager.utils";
/**
 * All methods is lambdas to preserve `this` context and allow DSL-like usage
 */
export class SeriesNonceManagerPredicateBuilder extends AbstractPredicateBuilder {
    constructor() {
        super(...arguments);
        this.nonce = (series, makerAddress) => {
            assertSeries(series);
            return this.facade.getContractCallData(SeriesNonceManagerMethods.nonce, [series, makerAddress]);
        };
        this.nonceEquals = (series, makerAddress, makerNonce) => {
            assertSeries(series);
            return this.facade.getContractCallData(SeriesNonceManagerMethods.nonceEquals, [series, makerAddress, makerNonce]);
        };
        this.timestampBelowAndNonceEquals = (series, timestamp, makerNonce, makerAddress) => {
            assertSeries(series);
            const predicateValue = BigInt(makerAddress)
                + (BigInt(series) << BigInt(160))
                + (BigInt(makerNonce) << BigInt(160 + 16))
                + (BigInt(timestamp) << BigInt(160 + 16 + 40));
            return this.facade.getContractCallData(SeriesNonceManagerMethods.timestampBelowAndNonceEquals, [ZX + predicateValue.toString(16)]);
        };
    }
}
//# sourceMappingURL=series-nonce-manager-predicate.builder.js.map