import { Fees } from './fees.js';
import { Whitelist } from './types.js';
import { Address } from '../../../address.js';
export declare class FeeCalculator {
    readonly fees: Fees;
    readonly whitelist: Whitelist;
    constructor(fees: Fees, whitelist: Whitelist);
    getTakingAmount(taker: Address, orderTakingAmount: bigint): bigint;
    getMakingAmount(taker: Address, makingAmount: bigint): bigint;
    /**
     * Fee in `takerAsset` which resolver pays to resolver fee receiver
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */
    getResolverFee(taker: Address, orderTakingAmount: bigint): bigint;
    /**
     * Fee in `takerAsset` which integrator gets to integrator wallet
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */
    getIntegratorFee(taker: Address, orderTakingAmount: bigint): bigint;
    /**
     * Fee in `takerAsset` which protocol gets as share from integrator fee
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */
    getProtocolShareOfIntegratorFee(taker: Address, orderTakingAmount: bigint): bigint;
    /**
     * Fee in `takerAsset` which protocol gets
     * It equals to `share from integrator fee plus resolver fee`
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */
    getProtocolFee(taker: Address, orderTakingAmount: bigint): bigint;
    private getFeesForTaker;
}
