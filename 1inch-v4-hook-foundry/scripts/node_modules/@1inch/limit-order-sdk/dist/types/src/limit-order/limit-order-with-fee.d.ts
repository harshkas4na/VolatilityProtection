import { FeeTakerExtension } from './extensions/fee-taker/fee-taker.extension.js';
import { LimitOrder } from './limit-order.js';
import { LimitOrderV4Struct, OrderInfoData } from './types.js';
import { MakerTraits } from './maker-traits.js';
import { Extension } from './extensions/extension.js';
import { Address } from '../address.js';
export declare class LimitOrderWithFee extends LimitOrder {
    readonly feeExtension: FeeTakerExtension;
    constructor(
    /**
     * Use `FeeTakerExtension.customReceiver` to set custom receiver
     */
    orderInfo: Omit<OrderInfoData, 'receiver'>, makerTraits: MakerTraits | undefined, feeExtension: FeeTakerExtension);
    /**
     * Set random nonce to `makerTraits` and creates `LimitOrderWithFee`
     */
    static withRandomNonce(
    /**
     * Use `FeeTakerExtension.recipients.tokensRecipient` to set custom receiver
     */
    orderInfo: Omit<OrderInfoData, 'receiver'>, feeExtension: FeeTakerExtension, makerTraits?: MakerTraits): LimitOrderWithFee;
    static fromDataAndExtension(data: LimitOrderV4Struct, extension: Extension): LimitOrderWithFee;
    /**
     * Calculates the `takingAmount` required from the taker in exchange for the `makingAmount`
     *
     * @param taker
     * @param makingAmount amount to be filled
     */
    getTakingAmount(taker: Address, makingAmount?: bigint): bigint;
    /**
     * Calculates the `makingAmount` that the taker receives in exchange for the `takingAmount`
     *
     * @param taker
     * @param takingAmount amount to be filled
     */
    getMakingAmount(taker: Address, takingAmount?: bigint): bigint;
    /**
     * Fee in `takerAsset` which resolver pays to resolver fee receiver
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */
    getResolverFee(taker: Address, makingAmount?: bigint): bigint;
    /**
     * Fee in `takerAsset` which integrator gets to integrator wallet
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */
    getIntegratorFee(taker: Address, makingAmount?: bigint): bigint;
    /**
     * Fee in `takerAsset` which protocol gets
     * It equals to `share from integrator fee plus resolver fee`
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */
    getProtocolFee(taker: Address, makingAmount?: bigint): bigint;
}
