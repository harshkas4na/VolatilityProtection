import { Extension } from './extensions/extension.js';
import { Interaction } from './interaction.js';
import { Address } from '../address.js';
export declare enum AmountMode {
    /**
     * Amount provided to fill function treated as `takingAmount` and `makingAmount` calculated based on it
     */
    taker = 0,
    /**
     * Amount provided to fill function treated as `makingAmount` and `takingAmount` calculated based on it
     */
    maker = 1
}
/**
 * TakerTraitsLib
 * This class defines TakerTraits, which are used to encode the taker's preferences for an order in a single uint256.
 *
 * The TakerTraits are structured as follows:
 * High bits are used for flags
 * 255 bit `_MAKER_AMOUNT_FLAG`           - If set, the taking amount is calculated based on making amount, otherwise making amount is calculated based on taking amount.
 * 254 bit `_UNWRAP_WETH_FLAG`            - If set, the WETH will be unwrapped into ETH before sending to taker.
 * 253 bit `_SKIP_ORDER_PERMIT_FLAG`      - If set, the order skips maker's permit execution.
 * 252 bit `_USE_PERMIT2_FLAG`            - If set, the order uses the permit2 function for authorization.
 * 251 bit `_ARGS_HAS_TARGET`             - If set, then first 20 bytes of args are treated as receiver address for makerâ€™s funds transfer.
 * 224-247 bits `ARGS_EXTENSION_LENGTH`   - The length of the extension calldata in the args.
 * 200-223 bits `ARGS_INTERACTION_LENGTH` - The length of the interaction calldata in the args.
 * 0-184 bits                             - The threshold amount (the maximum amount a taker agrees to give in exchange for a making amount).
 */
export declare class TakerTraits {
    private static MAKER_AMOUNT_FLAG;
    private static UNWRAP_WETH_FLAG;
    private static SKIP_ORDER_PERMIT_FLAG;
    private static USE_PERMIT2_FLAG;
    private static ARGS_HAS_RECEIVER;
    private static THRESHOLD_MASK;
    private static ARGS_INTERACTION_LENGTH_MASK;
    private static ARGS_EXTENSION_LENGTH_MASK;
    private flags;
    private receiver?;
    private extension?;
    private interaction?;
    constructor(flag: bigint, data: {
        receiver?: Address;
        extension?: Extension;
        interaction?: Interaction;
    });
    static default(): TakerTraits;
    /**
     * Returns enabled amount mode, it defines how to treat passed amount in `fillContractOrderArgs` function
     *
     * @see AmountMode
     */
    getAmountMode(): AmountMode;
    setAmountMode(mode: AmountMode): this;
    /**
     * Is the Wrapped native currency will be unwrapped into Native currency before sending to taker
     */
    isNativeUnwrapEnabled(): boolean;
    /**
     * Wrapped native currency will be unwrapped into Native currency before sending to taker
     */
    enableNativeUnwrap(): this;
    /**
     * Wrapped native currency will NOT be unwrapped into Native currency before sending to taker
     */
    disableNativeUnwrap(): this;
    /**
     * If true, then maker's permit execution is skipped
     */
    isOrderPermitSkipped(): boolean;
    /**
     * The order skips maker's permit execution
     */
    skipOrderPermit(): this;
    /**
     * Should use permit2 function for authorization or not
     *
     * @see https://github.com/Uniswap/permit2
     */
    isPermit2Enabled(): boolean;
    /**
     * Use permit2 function for authorization
     *
     * @see https://github.com/Uniswap/permit2
     */
    enablePermit2(): this;
    /**
     * NOT use permit2 function for authorization
     */
    disablePermit2(): this;
    /**
     * Sets address where order filled to, `msg.sender` used if not set
     *
     * @param receiver
     */
    setReceiver(receiver: Address): this;
    /**
     * Set order receiver as `msg.sender`
     */
    removeReceiver(): this;
    /**
     * Sets extension, it is required to provide same extension as in order creation (if any)
     */
    setExtension(ext: Extension): this;
    removeExtension(): this;
    /**
     * Set threshold amount
     *
     * In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
     * In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.
     *
     * @see AmountMode
     */
    setAmountThreshold(threshold: bigint): this;
    /**
     * Get threshold amount
     *
     * In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
     * In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.
     *
     * @see AmountMode
     */
    getAmountThreshold(): bigint;
    /**
     * @see setAmountThreshold
     */
    removeAmountThreshold(): this;
    /**
     * Sets taker interaction
     *
     * `interaction.target` should implement `ITakerInteraction` interface
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/1a32e059f78ddcf1fe6294baed6cafb73a04b685/contracts/interfaces/ITakerInteraction.sol#L11
     */
    setInteraction(interaction: Interaction): this;
    removeInteraction(): this;
    encode(): {
        trait: bigint;
        args: string;
    };
}
