import { Fees } from './fees.js';
import { WhitelistHalfAddress } from './whitelist-half-address.js';
import { FeeCalculator } from './fee-calculator.js';
import { Address } from '../../../address.js';
import { Interaction } from '../../interaction.js';
import { Extension } from '../extension.js';
/**
 * @see https://github.com/1inch/limit-order-protocol/blob/master/contracts/extensions/FeeTaker.sol
 */
export declare class FeeTakerExtension {
    readonly address: Address;
    readonly fees: Fees;
    readonly whitelist: WhitelistHalfAddress;
    readonly makerPermit?: Interaction | undefined;
    readonly extraInteraction?: Interaction | undefined;
    readonly customReceiver?: Address | undefined;
    /**
     * Flags for post-interaction data
     * @private
     */
    private static CUSTOM_RECEIVER_FLAG_BIT;
    private constructor();
    static new(
    /**
     * Address of extension
     */
    address: Address, 
    /**
     * @see ResolverFee
     * @see IntegratorFee
     */
    fees: Fees, 
    /**
     * If empty, then KYC token is required to fill order
     */
    whitelist?: Address[], extra?: {
        makerPermit?: Interaction;
        /**
         * In case receiver of taker tokens is not maker
         */
        customReceiver?: Address;
        /**
         * Will be called after FeeTaker.postInteraction
         */
        extraInteraction?: Interaction;
    }): FeeTakerExtension;
    /**
     * Create `FeeTakerExtension` from bytes
     *
     * @param bytes 0x prefixed bytes
     */
    static decode(bytes: string): FeeTakerExtension;
    /**
     * Create `FeeTakerExtension` from `Extension`
     */
    static fromExtension(extension: Extension): FeeTakerExtension;
    getFeeCalculator(): FeeCalculator;
    build(): Extension;
    /**
     * Returns takingAmount with applied fees to it
     *
     * @param taker address which fill order
     * @param takingAmount amount to apply fee to
     */
    getTakingAmount(taker: Address, takingAmount: bigint): bigint;
    /**
     * Returns makingAmount with applied fees to it
     *
     * @param taker address which fill order
     * @param makingAmount amount to apply fee to
     */
    getMakingAmount(taker: Address, makingAmount: bigint): bigint;
    /**
     * Fee in `takerAsset` which resolver pays to resolver fee receiver
     *
     * @param taker who will fill order
     * @param takingAmount taking amount to apply fee to
     */
    getResolverFee(taker: Address, takingAmount: bigint): bigint;
    /**
     * Fee in `takerAsset` which integrator gets to integrator wallet
     *
     * @param taker who will fill order
     * @param takingAmount taking amount to calculate fee from
     */
    getIntegratorFee(taker: Address, takingAmount: bigint): bigint;
    /**
     * Fee in `takerAsset` which protocol gets as share from integrator fee
     *
     * @param taker who will fill order
     * @param takingAmount taking amount to calculate fee from
     */
    getProtocolShareOfIntegratorFee(taker: Address, takingAmount: bigint): bigint;
    /**
     * Fee in `takerAsset` which protocol gets
     * It equals to `share from integrator fee plus resolver fee`
     *
     * @param taker who will fill order
     * @param takingAmount taking amount to calculate fee from
     */
    getProtocolFee(taker: Address, takingAmount: bigint): bigint;
    /**
     * Build data for AmountGetterWithFee
     *
     * 2 bytes — integrator fee percentage (in 1e5)
     * 1 byte - integrator share percentage (in 1e2)
     * 2 bytes — resolver fee percentage (in 1e5)
     * 1 byte - whitelist discount numerator (in 1e2)
     * 1 byte - size of the whitelist
     * (bytes10)[N] whitelisted addresses;
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/AmountGetterWithFee.sol#L56
     */
    private buildAmountGetterData;
    /**
     * Build data for `FeeTaker.postInteraction`
     *
     *
     * 1 byte - flags:
     *      01 bit `CUSTOM_RECEIVER_FLAG` - set to 1 if order has custom receiver
     * 20 bytes — integrator fee recipient
     * 20 bytes - protocol fee recipient
     * [20 bytes] — receiver of taking tokens (optional, if not set, maker is used). See `CUSTOM_RECEIVER_FLAG` flag
     * Same as in `buildAmountGetterData`
     * [bytes20, bytes] - optional extra interaction
     * @see buildAmountGetterData
     * @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/FeeTaker.sol#L114
     */
    private buildInteractionData;
}
