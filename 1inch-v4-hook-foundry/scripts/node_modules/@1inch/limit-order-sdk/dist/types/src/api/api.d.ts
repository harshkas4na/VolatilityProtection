import { ApiConfig, FeeInfoDTO, LimitOrderApiItem, SortKey, StatusKey, CursorPaginatedResponse } from './types.js';
import { CursorPager } from './pager.js';
import { LimitOrder } from '../limit-order/index.js';
import { Address } from '../address.js';
export declare class Api {
    private readonly baseUrl;
    private readonly networkId;
    private readonly httpClient;
    private readonly authHeader;
    constructor(config: ApiConfig);
    /**
     * Submit order to orderbook
     * @param order
     * @param signature
     */
    submitOrder(order: LimitOrder, signature: string): Promise<void>;
    /**
     * Fetch orders created by `maker` with cursor-based pagination
     * @param maker - The maker address
     * @param filters - Filter options including pagination via CursorPager
     * @param sort - Sort key for ordering results
     */
    getOrdersByMaker(maker: Address, filters?: {
        pager?: CursorPager;
        /**
         * 1 - Valid orders,
         * 2 - Temporarily invalid orders,
         * 3 - Invalid orders.
         */
        statuses?: StatusKey[];
        takerAsset?: Address;
        makerAsset?: Address;
    }, sort?: SortKey): Promise<CursorPaginatedResponse<LimitOrderApiItem>>;
    /**
     * Fetch all orders with cursor-based pagination
     * @param filters - Filter options including pagination via CursorPager
     * @param sort - Sort key for ordering results
     */
    getAllOrders(filters?: {
        pager?: CursorPager;
        /**
         * 1 - Valid orders,
         * 2 - Temporarily invalid orders,
         * 3 - Invalid orders.
         */
        statuses?: StatusKey[];
        takerAsset?: Address;
        makerAsset?: Address;
    }, sort?: SortKey): Promise<CursorPaginatedResponse<LimitOrderApiItem>>;
    /**
     * Get limit order by hash
     *
     * Error will be thrown if order is not found
     */
    getOrderByHash(hash: string): Promise<LimitOrderApiItem>;
    /**
     * Fetch current fee params, only orders with matched params can be submitted to 1inch relayer
     */
    getFeeParams(params: {
        makerAsset: Address;
        takerAsset: Address;
        makerAmount: bigint;
        takerAmount: bigint;
    }): Promise<FeeInfoDTO>;
    private url;
    private headers;
}
