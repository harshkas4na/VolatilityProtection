import { Address } from '../address.js';
/**
 * The MakerTraits type is an uint256, and different parts of the number are used to encode different traits.
 * High bits are used for flags
 * 255 bit `NO_PARTIAL_FILLS_FLAG`          - if set, the order does not allow partial fills
 * 254 bit `ALLOW_MULTIPLE_FILLS_FLAG`      - if set, the order permits multiple fills
 * 253 bit                                  - unused
 * 252 bit `PRE_INTERACTION_CALL_FLAG`      - if set, the order requires pre-interaction call
 * 251 bit `POST_INTERACTION_CALL_FLAG`     - if set, the order requires post-interaction call
 * 250 bit `NEED_CHECK_EPOCH_MANAGER_FLAG`  - if set, the order requires to check the epoch manager
 * 249 bit `HAS_EXTENSION_FLAG`             - if set, the order has extension(s)
 * 248 bit `USE_PERMIT2_FLAG`               - if set, the order uses permit2
 * 247 bit `UNWRAP_WETH_FLAG`               - if set, the order requires to unwrap WETH
 *
 * Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series
 * uint80 last 10 bytes of allowed sender address (0 if any)
 * uint40 expiration timestamp (0 if none)
 * uint40 nonce or epoch
 * uint40 series
 */
export declare class MakerTraits {
    private static ALLOWED_SENDER_MASK;
    private static EXPIRATION_MASK;
    private static NONCE_OR_EPOCH_MASK;
    private static SERIES_MASK;
    private static NO_PARTIAL_FILLS_FLAG;
    private static ALLOW_MULTIPLE_FILLS_FLAG;
    private static PRE_INTERACTION_CALL_FLAG;
    private static POST_INTERACTION_CALL_FLAG;
    private static NEED_CHECK_EPOCH_MANAGER_FLAG;
    private static HAS_EXTENSION_FLAG;
    private static USE_PERMIT2_FLAG;
    private static UNWRAP_WETH_FLAG;
    private value;
    constructor(val: bigint);
    static default(): MakerTraits;
    /**
     * Last 10bytes of address
     */
    allowedSender(): string;
    isPrivate(): boolean;
    withAllowedSender(sender: Address): this;
    /**
     * Removes `sender` check on contract
     */
    withAnySender(): this;
    /**
     * If null is return than order has no expiration
     */
    expiration(): bigint | null;
    /**
     * Set order expiration time
     *
     * @param expiration expiration timestamp in sec
     */
    withExpiration(expiration: bigint): this;
    /**
     * Returns epoch in case `isEpochManagerEnabled()` and nonce otherwise
     */
    nonceOrEpoch(): bigint;
    /**
     * Set nonce
     * Note: nonce and epoch share the same field, so they cant be set together
     * @param nonce must be less or equal to `uint40::max`
     */
    withNonce(nonce: bigint): this;
    /**
     * Enable epoch manager check
     *
     * If set, the contract will check that order epoch equals to epoch on `SeriesEpochManager` contract
     * Note: epoch manager can be used only when `partialFills` AND `multipleFills` allowed
     * Note: nonce and epoch share the same field, so they cant be set together
     *
     * @param series subgroup for epoch
     * @param epoch unique order id inside series
     * @see https://github.com/1inch/limit-order-protocol/blob/23d655844191dea7960a186652307604a1ed480a/contracts/helpers/SeriesEpochManager.sol#L6
     */
    withEpoch(series: bigint, epoch: bigint): this;
    /**
     * Get current series
     */
    series(): bigint;
    /**
     * Returns true if order has an extension and false otherwise
     */
    hasExtension(): boolean;
    /**
     * Mark that order has an extension
     */
    withExtension(): this;
    /**
     * Is partial fills allowed for order
     */
    isPartialFillAllowed(): boolean;
    /**
     * Disable partial fills for order
     */
    disablePartialFills(): this;
    /**
     * Allow partial fills for order
     */
    allowPartialFills(): this;
    /**
     * Set partial fill flag to passed value
     */
    setPartialFills(val: boolean): this;
    /**
     * Returns true if order allowing more than one fill and false otherwise
     */
    isMultipleFillsAllowed(): boolean;
    /**
     * Allow many fills for order
     */
    allowMultipleFills(): this;
    /**
     * Allow at max 1 fill for order
     */
    disableMultipleFills(): this;
    /**
     * If `val` is true, then multiple fills allowed, otherwise disallowed
     */
    setMultipleFills(val: boolean): this;
    /**
     * Returns true if maker has pre-interaction and false otherwise
     */
    hasPreInteraction(): boolean;
    /**
     * Enable maker pre-interaction
     */
    enablePreInteraction(): this;
    /**
     * Disable maker pre-interaction
     */
    disablePreInteraction(): this;
    /**
     * Returns true if maker has post-interaction and false otherwise
     */
    hasPostInteraction(): boolean;
    /**
     * Enable maker post-interaction
     */
    enablePostInteraction(): this;
    /**
     * Disable maker post-interaction
     */
    disablePostInteraction(): this;
    /**
     * Returns true if epoch manager enabled
     *
     * @see MakerTraits.enableEpochManagerCheck
     */
    isEpochManagerEnabled(): boolean;
    /**
     * Returns true if `permit2` enabled for maker funds transfer
     *
     * @see https://github.com/Uniswap/permit2
     */
    isPermit2(): boolean;
    /**
     * Use `permit2` to transfer maker funds to contract
     *
     * @see https://github.com/Uniswap/permit2
     */
    enablePermit2(): this;
    /**
     * Do not use `permit2` to transfer maker funds to contract
     *
     * @see https://github.com/Uniswap/permit2
     */
    disablePermit2(): this;
    /**
     * Is WRAPPED token will be unwrapped to NATIVE before sending to maker
     */
    isNativeUnwrapEnabled(): boolean;
    /**
     * Unwrap WRAPPED token to NATIVE before sending it to maker
     */
    enableNativeUnwrap(): this;
    /**
     * Do not unwrap WRAPPED token to NATIVE before sending it to maker
     */
    disableNativeUnwrap(): this;
    asBigInt(): bigint;
    /**
     * Returns true if bit invalidator mode is used to invalidate order (cancel/mark as filled)
     *
     * Bit invalidator is cheaper in terms of gas, but can be used only when partial fills OR multiple fills are disabled
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/3c9b8ab8bbc4c10ff8d615fc3d33f501993c292d/contracts/libraries/MakerTraitsLib.sol#L142
     */
    isBitInvalidatorMode(): boolean;
    private enableEpochManagerCheck;
    /**
     * Set series. Only when epoch manager enabled
     * Series is a subgroup for epoch's, it can be useful when you want to cancel a group of orders at once
     *
     * @see MakerTraits.enableEpochManagerCheck
     */
    private setSeries;
}
