"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ProxyFactory", {
    enumerable: true,
    get: function() {
        return ProxyFactory;
    }
});
var _byteutils = require("@1inch/byte-utils");
var _ethers = require("ethers");
var _assert = /*#__PURE__*/ _interop_require_default(require("assert"));
var _address = require("../address.js");
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ProxyFactory = /*#__PURE__*/ function() {
    "use strict";
    function ProxyFactory(factory, implementation) {
        _class_call_check(this, ProxyFactory);
        _define_property(this, "factory", void 0);
        _define_property(this, "implementation", void 0);
        this.factory = factory;
        this.implementation = implementation;
    }
    _create_class(ProxyFactory, [
        {
            key: "getProxyAddress",
            value: /**
     * Calculates deterministic address of proxy contract
     *
     * @see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/69c8def5f222ff96f2b5beff05dfba996368aa79/contracts/proxy/Clones.sol#L60
     *
     * @param salt must be valid hex string
     * @returns address of proxy contract
     */ function getProxyAddress(salt) {
                (0, _assert.default)((0, _byteutils.isHexBytes)(salt), 'invalid salt');
                return new _address.Address((0, _ethers.getCreate2Address)(this.factory.toString(), salt, ProxyFactory.calcProxyBytecodeHash(this.implementation)));
            }
        }
    ], [
        {
            key: "calcProxyBytecodeHash",
            value: /**
     * See https://github.com/1inch/cross-chain-swap/blob/03d99b9604d8f7a5a396720fbe1059f7d94db762/contracts/libraries/ProxyHashLib.sol#L14
     */ function calcProxyBytecodeHash(impl) {
                return (0, _ethers.keccak256)("0x3d602d80600a3d3981f3363d3d373d3d3d363d73".concat((0, _byteutils.trim0x)(impl.toString()), "5af43d82803e903d91602b57fd5bf3"));
            }
        }
    ]);
    return ProxyFactory;
}();
