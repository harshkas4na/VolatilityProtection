"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _limitorder = require("./limit-order.js");
var _extensionbuilder = require("./extensions/extension-builder.js");
var _makertraits = require("./maker-traits.js");
var _index = require("./extensions/index.js");
var _address = require("../address.js");
var _index1 = require("../limit-order-contract/index.js");
describe('Limit Order', function() {
    jest.spyOn(Math, 'random').mockReturnValue(1);
    jest.spyOn(Date, 'now').mockReturnValue(1673549418040);
    it('should create limit order', function() {
        var order = new _limitorder.LimitOrder({
            makerAsset: new _address.Address('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'),
            takerAsset: new _address.Address('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: new _address.Address('0x00000000219ab540356cbb839cbe05303d7705fa')
        });
        expect(order.receiver).toEqual(_address.Address.ZERO_ADDRESS);
        expect(_limitorder.LimitOrder.fromCalldata(order.toCalldata())).toEqual(order);
    });
    it('should create limit order and set receiver == maker', function() {
        var ext = new _extensionbuilder.ExtensionBuilder().build();
        var order = new _limitorder.LimitOrder({
            makerAsset: new _address.Address('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'),
            takerAsset: new _address.Address('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: new _address.Address('0x00000000219ab540356cbb839cbe05303d7705fa'),
            salt: _limitorder.LimitOrder.buildSalt(ext)
        }, _makertraits.MakerTraits.default(), ext, {
            optimizeReceiverAddress: false
        });
        expect(order.receiver).toEqual(order.maker);
        expect(_limitorder.LimitOrder.fromCalldata(order.toCalldata())).toEqual(order);
        expect(_limitorder.LimitOrder.fromDataAndExtension(order.build(), ext)).toEqual(order);
    });
    it('should create limit order with passed salt', function() {
        var order = new _limitorder.LimitOrder({
            makerAsset: new _address.Address('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'),
            takerAsset: new _address.Address('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: new _address.Address('0x00000000219ab540356cbb839cbe05303d7705fa'),
            salt: 10n
        });
        expect(_limitorder.LimitOrder.fromCalldata(order.toCalldata())).toEqual(order);
    });
    it('should create limit order with extension and salt', function() {
        var ext = new _extensionbuilder.ExtensionBuilder().withCustomData('0xdeadbeef').build();
        var order = new _limitorder.LimitOrder({
            makerAsset: new _address.Address('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'),
            takerAsset: new _address.Address('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: new _address.Address('0x00000000219ab540356cbb839cbe05303d7705fa'),
            salt: _limitorder.LimitOrder.buildSalt(ext)
        }, _makertraits.MakerTraits.default(), ext);
        expect(_limitorder.LimitOrder.fromDataAndExtension(order.build(), ext)).toEqual(order);
    });
});
describe('Limit Order Native', function() {
    jest.spyOn(Math, 'random').mockReturnValue(1);
    jest.spyOn(Date, 'now').mockReturnValue(1673549418040);
    it('should correct detect that order is from native asset', function() {
        var ethOrderFactory = new _index1.ProxyFactory(_address.Address.fromBigInt(228n), _address.Address.fromBigInt(2n));
        var maker = new _address.Address('0x00000000219ab540356cbb839cbe05303d7705fa');
        var nativeOrder = _limitorder.LimitOrder.fromNative(1, ethOrderFactory, {
            takerAsset: new _address.Address('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: maker,
            salt: 10n
        }, _makertraits.MakerTraits.default().withExtension(), _index.Extension.default());
        expect(nativeOrder.receiver).toEqual(maker);
        expect(nativeOrder.isNative(1, ethOrderFactory, nativeOrder.nativeSignature(maker))).toEqual(true);
        expect(_limitorder.LimitOrder.fromDataAndExtension(nativeOrder.build(), nativeOrder.extension).isNative(1, ethOrderFactory, nativeOrder.nativeSignature(maker))).toEqual(true);
    });
    it('should correct detect that order is from native asset (no salt)', function() {
        var ethOrderFactory = new _index1.ProxyFactory(_address.Address.fromBigInt(228n), _address.Address.fromBigInt(2n));
        var maker = new _address.Address('0x00000000219ab540356cbb839cbe05303d7705fa');
        var nativeOrder = _limitorder.LimitOrder.fromNative(1, ethOrderFactory, {
            takerAsset: new _address.Address('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: maker
        }, _makertraits.MakerTraits.default().withExtension(), _index.Extension.default());
        expect(nativeOrder.receiver).toEqual(maker);
        expect(nativeOrder.isNative(1, ethOrderFactory, nativeOrder.nativeSignature(maker))).toEqual(true);
        expect(_limitorder.LimitOrder.fromDataAndExtension(nativeOrder.build(), nativeOrder.extension).isNative(1, ethOrderFactory, nativeOrder.nativeSignature(maker))).toEqual(true);
    });
    it('should correct detect that order is NOT from native asset', function() {
        var ethOrderFactory = new _index1.ProxyFactory(_address.Address.fromBigInt(228n), _address.Address.fromBigInt(2n));
        var maker = new _address.Address('0x00000000219ab540356cbb839cbe05303d7705fa');
        var order = new _limitorder.LimitOrder({
            makerAsset: new _address.Address('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'),
            takerAsset: new _address.Address('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: maker
        });
        expect(order.receiver).toEqual(_address.Address.ZERO_ADDRESS);
        expect(order.isNative(1, ethOrderFactory, order.nativeSignature(maker))).toEqual(false);
        expect(_limitorder.LimitOrder.fromDataAndExtension(order.build(), order.extension).isNative(1, ethOrderFactory, order.nativeSignature(maker))).toEqual(false);
    });
});
