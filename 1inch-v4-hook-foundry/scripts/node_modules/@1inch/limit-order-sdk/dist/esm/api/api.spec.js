function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _ts_generator(thisArg, body) {
    var f, y, t, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import { Api } from './api.js';
import { CursorPager } from './pager.js';
import { Address } from '../address.js';
describe('Api', function() {
    var api;
    var mockHttpConnector;
    beforeEach(function() {
        mockHttpConnector = {
            get: jest.fn(),
            post: jest.fn()
        };
        api = new Api({
            networkId: 1,
            authKey: 'test-auth-key',
            httpConnector: mockHttpConnector,
            baseUrl: 'https://api.test.com'
        });
    });
    describe('getOrdersByMaker', function() {
        var mockMakerAddress = new Address('0x1234567890123456789012345678901234567890');
        var mockResponse = {
            items: [
                {
                    signature: '0xsignature',
                    orderHash: '0xhash',
                    createDateTime: '2023-10-19T14:03:27.500Z',
                    remainingMakerAmount: '1000000',
                    makerBalance: '5000000',
                    makerAllowance: '10000000',
                    data: {
                        salt: '123',
                        maker: '0x1234567890123456789012345678901234567890',
                        receiver: '0x0000000000000000000000000000000000000000',
                        makerAsset: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
                        takerAsset: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
                        makingAmount: '1000000',
                        takingAmount: '2000000000000000',
                        makerTraits: '0',
                        extension: '0x'
                    },
                    makerRate: '2000',
                    takerRate: '0.0005',
                    isMakerContract: false,
                    orderInvalidReason: null
                }
            ],
            meta: {
                hasMore: true,
                nextCursor: 'eyJhY3Rpdml0eURhdGUiOiIyMDIzLTEwLTE5VDE0OjAzOjI3LjUwMFoiLCJvcmRlckhhc2giOiIweDBkOTIwNzllMzgyOGYxZGQ2ZTQ4MTI2OWUwZDkxMmU2MGQwNGE1OGEwM2EyYzFmMDUyOWVkMTIwY2U2YmEwYmMifQ==',
                count: 150
            }
        };
        it('should fetch orders with default parameters', function() {
            return _async_to_generator(function() {
                var result;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress)
                            ];
                        case 1:
                            result = _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/address/0x1234567890123456789012345678901234567890?limit=100', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            expect(result).toEqual(mockResponse);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should fetch orders with CursorPager', function() {
            return _async_to_generator(function() {
                var pager, result;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            pager = new CursorPager({
                                limit: 20,
                                cursor: 'test-cursor'
                            });
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress, {
                                    pager: pager
                                })
                            ];
                        case 1:
                            result = _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/address/0x1234567890123456789012345678901234567890?limit=20&cursor=test-cursor', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            expect(result).toEqual(mockResponse);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should fetch orders with filters', function() {
            return _async_to_generator(function() {
                var pager, makerAsset, takerAsset, result;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            pager = new CursorPager({
                                limit: 50
                            });
                            makerAsset = new Address('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48');
                            takerAsset = new Address('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2');
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress, {
                                    pager: pager,
                                    statuses: [
                                        1,
                                        2
                                    ],
                                    makerAsset: makerAsset,
                                    takerAsset: takerAsset
                                })
                            ];
                        case 1:
                            result = _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/address/0x1234567890123456789012345678901234567890?limit=50&statuses=1%2C2&makerAsset=0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&takerAsset=0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            expect(result).toEqual(mockResponse);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should fetch orders with sort parameter', function() {
            return _async_to_generator(function() {
                var pager, result;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            pager = new CursorPager({
                                limit: 10
                            });
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress, {
                                    pager: pager,
                                    statuses: [
                                        1
                                    ]
                                }, 'createDateTime')
                            ];
                        case 1:
                            result = _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/address/0x1234567890123456789012345678901234567890?limit=10&statuses=1&sortBy=createDateTime', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            expect(result).toEqual(mockResponse);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should handle pagination flow', function() {
            return _async_to_generator(function() {
                var firstPageResponse, secondPageResponse, firstPage, secondPage;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            firstPageResponse = _object_spread({}, mockResponse);
                            secondPageResponse = {
                                items: [
                                    _object_spread_props(_object_spread({}, mockResponse.items[0]), {
                                        orderHash: '0xhash2'
                                    })
                                ],
                                meta: {
                                    hasMore: false,
                                    nextCursor: undefined,
                                    count: 150
                                }
                            };
                            mockHttpConnector.get.mockResolvedValueOnce(firstPageResponse).mockResolvedValueOnce(secondPageResponse);
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress, {
                                    pager: new CursorPager({
                                        limit: 10
                                    })
                                })
                            ];
                        case 1:
                            firstPage = _state.sent();
                            expect(firstPage.meta.hasMore).toBe(true);
                            expect(firstPage.meta.nextCursor).toBeDefined();
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress, {
                                    pager: new CursorPager({
                                        limit: 10,
                                        cursor: firstPage.meta.nextCursor
                                    })
                                })
                            ];
                        case 2:
                            secondPage = _state.sent();
                            expect(secondPage.meta.hasMore).toBe(false);
                            expect(secondPage.meta.nextCursor).toBeUndefined();
                            expect(mockHttpConnector.get).toHaveBeenCalledTimes(2);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should filter out undefined params from URL', function() {
            return _async_to_generator(function() {
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress, {
                                    pager: new CursorPager({
                                        limit: 30
                                    }),
                                    statuses: undefined,
                                    makerAsset: undefined,
                                    takerAsset: undefined
                                })
                            ];
                        case 1:
                            _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/address/0x1234567890123456789012345678901234567890?limit=30', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should use default limit when no pager provided', function() {
            return _async_to_generator(function() {
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress, {
                                    statuses: [
                                        1
                                    ]
                                })
                            ];
                        case 1:
                            _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/address/0x1234567890123456789012345678901234567890?limit=100&statuses=1', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should correctly format multiple statuses', function() {
            return _async_to_generator(function() {
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            return [
                                4,
                                api.getOrdersByMaker(mockMakerAddress, {
                                    pager: new CursorPager({
                                        limit: 25
                                    }),
                                    statuses: [
                                        1,
                                        2,
                                        3
                                    ]
                                })
                            ];
                        case 1:
                            _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/address/0x1234567890123456789012345678901234567890?limit=25&statuses=1%2C2%2C3', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            return [
                                2
                            ];
                    }
                });
            })();
        });
    });
    describe('getAllOrders', function() {
        var mockResponse = {
            items: [
                {
                    signature: '0x8602bff28fa0b4909a0bb8e9ba501728db9694dafbc2b83bc5ecdf9976f73b557c90226eae2310c758fb3d10948abac030a02552c51224c6cda60330eaf23a171c',
                    orderHash: '0x5aff21a65ca4e9b4d4ba465349aadb272b1fb2e8f44c0b611e924195ae83b267',
                    createDateTime: '2025-06-13T10:56:38.975Z',
                    remainingMakerAmount: '99894117',
                    makerBalance: '10200000',
                    makerAllowance: '115792089237316195423570985008687907853269984665640564039457584007913129639935',
                    data: {
                        salt: '90536730783456932835645408933940884394045489330979075652578445150989675126720',
                        maker: '0x091e79334ee3f1c3783ffd208940dcf12c04cbc5',
                        receiver: '0x0000000000000000000000000000000000000000',
                        makerAsset: '0xdac17f958d2ee523a2206206994597c13d831ec7',
                        takerAsset: '0x6b175474e89094c44da98b954eedeac495271d0f',
                        makingAmount: '99894117',
                        takingAmount: '149696302130000000000',
                        makerTraits: '0x440000000000000000000000000000000000684c042000000000000000000000',
                        extension: '0x'
                    },
                    makerRate: '1498549730711.369118964232898720',
                    takerRate: '0.000000000000667312',
                    isMakerContract: false,
                    orderInvalidReason: null
                }
            ],
            meta: {
                hasMore: true,
                nextCursor: 'eyJpZCI6IjYzOSIsImNyZWF0ZURhdGVUaW1lIjoiMjAyNS0wNi0xM1QxMDo0OTo1MS4wMDZaIn0=',
                count: 7
            }
        };
        it('should fetch all orders with default parameters', function() {
            return _async_to_generator(function() {
                var result;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            return [
                                4,
                                api.getAllOrders()
                            ];
                        case 1:
                            result = _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/all?limit=100', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            expect(result).toEqual(mockResponse);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should fetch all orders with CursorPager', function() {
            return _async_to_generator(function() {
                var pager, result;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            pager = new CursorPager({
                                limit: 50,
                                cursor: 'test-cursor'
                            });
                            return [
                                4,
                                api.getAllOrders({
                                    pager: pager
                                })
                            ];
                        case 1:
                            result = _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/all?limit=50&cursor=test-cursor', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            expect(result).toEqual(mockResponse);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should fetch all orders with filters', function() {
            return _async_to_generator(function() {
                var pager, makerAsset, takerAsset, result;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            pager = new CursorPager({
                                limit: 30
                            });
                            makerAsset = new Address('0xdac17f958d2ee523a2206206994597c13d831ec7');
                            takerAsset = new Address('0x6b175474e89094c44da98b954eedeac495271d0f');
                            return [
                                4,
                                api.getAllOrders({
                                    pager: pager,
                                    statuses: [
                                        1
                                    ],
                                    makerAsset: makerAsset,
                                    takerAsset: takerAsset
                                })
                            ];
                        case 1:
                            result = _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/all?limit=30&statuses=1&makerAsset=0xdac17f958d2ee523a2206206994597c13d831ec7&takerAsset=0x6b175474e89094c44da98b954eedeac495271d0f', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            expect(result).toEqual(mockResponse);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should fetch all orders with sort parameter', function() {
            return _async_to_generator(function() {
                var pager, result;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            mockHttpConnector.get.mockResolvedValueOnce(mockResponse);
                            pager = new CursorPager({
                                limit: 20
                            });
                            return [
                                4,
                                api.getAllOrders({
                                    pager: pager,
                                    statuses: [
                                        1,
                                        2
                                    ]
                                }, 'makerRate')
                            ];
                        case 1:
                            result = _state.sent();
                            expect(mockHttpConnector.get).toHaveBeenCalledWith('https://api.test.com/1/all?limit=20&statuses=1%2C2&sortBy=makerRate', {
                                Authorization: 'Bearer test-auth-key'
                            });
                            expect(result).toEqual(mockResponse);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
        it('should handle pagination flow for all orders', function() {
            return _async_to_generator(function() {
                var firstPageResponse, secondPageResponse, firstPage, secondPage;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            firstPageResponse = _object_spread({}, mockResponse);
                            secondPageResponse = {
                                items: [
                                    _object_spread_props(_object_spread({}, mockResponse.items[0]), {
                                        orderHash: '0xhash2'
                                    })
                                ],
                                meta: {
                                    hasMore: false,
                                    nextCursor: undefined,
                                    count: 7
                                }
                            };
                            mockHttpConnector.get.mockResolvedValueOnce(firstPageResponse).mockResolvedValueOnce(secondPageResponse);
                            return [
                                4,
                                api.getAllOrders({
                                    pager: new CursorPager({
                                        limit: 10
                                    })
                                })
                            ];
                        case 1:
                            firstPage = _state.sent();
                            expect(firstPage.meta.hasMore).toBe(true);
                            expect(firstPage.meta.nextCursor).toBeDefined();
                            return [
                                4,
                                api.getAllOrders({
                                    pager: new CursorPager({
                                        limit: 10,
                                        cursor: firstPage.meta.nextCursor
                                    })
                                })
                            ];
                        case 2:
                            secondPage = _state.sent();
                            expect(secondPage.meta.hasMore).toBe(false);
                            expect(secondPage.meta.nextCursor).toBeUndefined();
                            expect(mockHttpConnector.get).toHaveBeenCalledTimes(2);
                            return [
                                2
                            ];
                    }
                });
            })();
        });
    });
});
